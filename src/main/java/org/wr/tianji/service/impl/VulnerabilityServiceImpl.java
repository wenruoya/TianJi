package org.wr.tianji.service.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.wr.tianji.common.result.PageResult;
import org.wr.tianji.mapper.UserMapper;
import org.wr.tianji.mapper.VulnerabilityMapper;
import org.wr.tianji.pojo.dto.VulnDTO;
import org.wr.tianji.pojo.dto.VulnPageQueryDTO;
import org.wr.tianji.pojo.entity.Vuln;
import org.wr.tianji.pojo.vo.VulnVO;
import org.wr.tianji.service.VulnerabilityService;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

    @Autowired
    private VulnerabilityMapper vulnerabilityMapper;

    /**
     * 新增漏洞类型
     * @param vulnDTO
     */
    @Override
    public void insert(VulnDTO vulnDTO) {
        Vuln vuln = new Vuln();
        BeanUtils.copyProperties(vulnDTO,vuln);
        vulnerabilityMapper.insert(vuln);
    }


    /**
     * 分页查询
     * @param vulnPageQueryDTO
     * @return
     */
    @Override
    public PageResult pageQuery(VulnPageQueryDTO vulnPageQueryDTO) {
        PageHelper.startPage(vulnPageQueryDTO.getPage(),vulnPageQueryDTO.getPageSize());
        Page<Vuln> page = vulnerabilityMapper.pageQuery(vulnPageQueryDTO);
        long total = page.getTotal();
        List<VulnVO> vulnVOList = page.getResult().stream().map(
                vuln -> {
                    VulnVO vulnVO = new VulnVO();
                    vulnVO.setVulnId(vuln.getVulnId());
                    vulnVO.setVulnerabilityType(vuln.getVulnerabilityType());
                    vulnVO.setVulnerabilitySuggest(vuln.getVulnerabilitySuggest());
                    return vulnVO;
                }).collect(Collectors.toList());

        return new PageResult(total,vulnVOList);
    }

    /**
     * 更新
     * @param vuln
     */
    @Override
    public void update(Vuln vuln) {
        vulnerabilityMapper.update(vuln);
    }

    /**
     * 批量删除
     * @param idList
     */
    @Override
    public void deleteBatch(List<Long> idList) {
        for(Long id : idList){
            vulnerabilityMapper.delete(id);
        }
    }
}
