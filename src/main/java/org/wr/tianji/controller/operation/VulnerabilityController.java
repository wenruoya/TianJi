package org.wr.tianji.controller.operation;


import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.wr.tianji.common.result.PageResult;
import org.wr.tianji.common.result.Result;
import org.wr.tianji.pojo.dto.VulnDTO;
import org.wr.tianji.pojo.dto.VulnPageQueryDTO;
import org.wr.tianji.pojo.entity.Vuln;
import org.wr.tianji.service.VulnerabilityService;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@Slf4j
@Tag(name = "运营视角漏洞类型")
@RequestMapping("/operation/vuln")
public class VulnerabilityController {

    @Autowired
    private VulnerabilityService vulnerabilityService;

    /**
     * 新增漏洞类型
     * @param vulnDTO
     * @return
     */
    @PostMapping
    @Operation(summary = "新增漏洞类型")
    public Result insert(@RequestBody VulnDTO vulnDTO){
        vulnerabilityService.insert(vulnDTO);
        return Result.success();
    }

    /**
     * 删除漏洞类型
     * @param ids
     * @return
     */
    @DeleteMapping
    @Operation(summary = "删除漏洞类型")
    public Result delete(@RequestParam String ids){
        List<Long> idList = Arrays.stream(ids.split(","))
                .map(Long::valueOf)
                .collect(Collectors.toList());
        vulnerabilityService.deleteBatch(idList);
        return Result.success();
    }

    /**
     * 分页查询漏洞类型
     * @param page
     * @param pageSize
     * @param vulnerabilityType
     * @return
     */
    @GetMapping("/page")
    @Operation(summary = "漏洞分页查询")
    public Result<PageResult> page (@RequestParam Integer page,@RequestParam Integer pageSize,@RequestParam(required = false) String vulnerabilityType){
        VulnPageQueryDTO vulnPageQueryDTO = new VulnPageQueryDTO();
        vulnPageQueryDTO.setPageSize(pageSize);
        vulnPageQueryDTO.setPage(page);
        vulnPageQueryDTO.setVulnerabilityType(vulnerabilityType);

        PageResult pageResult = vulnerabilityService.pageQuery(vulnPageQueryDTO);
        return Result.success(pageResult);
    }

    /***
     * 更新漏洞
     * @param vulnId
     * @return
     */
    @PutMapping("/{vulnId}")
    @Operation(summary = "更新漏洞类型")
    public Result<PageResult> update(@PathVariable Integer vulnId, @RequestBody(required = false) VulnDTO vulnDTO){
        Vuln vuln = new Vuln();
        vuln.setVulnId(Long.valueOf(vulnId));
        vuln.setVulnerabilitySuggest(vulnDTO.getVulnerabilitySuggest());
        vuln.setVulnerabilityType(vulnDTO.getVulnerabilityType());
        vulnerabilityService.update(vuln);
        return Result.success();
    }

}
